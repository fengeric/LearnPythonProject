# + （ 加）
# 两 个对象相 加。3+5 则 输出 8 。 ' a' + ' b' 则 输出 ' ab' 。
# -----------------------------------------------------
# - （ 减）从一个数中 减去另 一个数， 如果第 一个操作数不存在， 则 假定为 零。
# - 5. 2 将输出 一个负 数， 50 - 24 输出 26 。
# -----------------------------------------------------
# * （ 乘）
# 给出 两 个数的乘积， 或返回字符串 重复指定次数后 的结果。2 * 3 输出 6 。 'haha ' * 3 输出 'haha haha haha ' 。
print(2 * 3)
print("haha " * 3)
# -----------------------------------------------------
# ** （ 乘方）
# 返回 x 的 y 次方。 3 ** 4 输出 81 （ 即 3 * 3 * 3 * 3 ） 。
print(3 ** 4)
# -----------------------------------------------------
# / （ 除）x 除以 y
# 13 / 3 输出 4. 333333333333333 。
# -----------------------------------------------------
# // （ 整除）
# x 除以 y 并对结果向下取整至最接近的整数。13 // 3 输出 4 。- 13 // 3 输出 - 5 。
# -----------------------------------------------------
# % （ 取模）
# 返回除法运算后 的余数。13 % 3 输出 1 。 - 25. 5 % 2. 25 输出 1. 5 。
# -----------------------------------------------------
# << （ 左移）
# 将数字的位向左移动指定的位数。 （ 每个数字在内 存中 以二进制 数表示， 即 0 和1 ）
# 2 << 2 输出 8 。 2 用 二进制 数表示为 10 。向左移 2 位会得到 1000 这一结果， 表示十进制 中 的 8 。
# -----------------------------------------------------
# >> （ 右移）
# 将数字的位向右移动指定的位数。
# 11 >> 1 输出 5 。
# 11 在二进制 中 表示为 1011 ， 右移一位后 输出 101 这一结果， 表示十进制 中 的5 。
# -----------------------------------------------------
# & （ 按位与 ）按位与 是针对二进制 数的操作， 指将两 个二进制 数的每一位都进行比较， 如果两 个相应 的二进位都为 1 则 此位为 1 ， 否则 为 0
# 对数字进行按位与 操作。
# 5 & 3 输出 1 。
# -----------------------------------------------------
# | （ 按位或）按位或是针对二进制 数的操作， 指将两 个二进制 数的每一位都进行比较， 如果两 个相应 的二进位有一个为 1 则 此位为 1 ， 否则 为 0
# 对数字进行按位或操作。
# 5 | 3 输出 7
# -----------------------------------------------------
# ^ （ 按位异或）按位异或是针对二进制 数的操作， 指将两 个二进制 数的每一位都进行比较， 如果两 个相 应 的二进位不同 则 此位为 1 ， 相 同 为 0
# 对数字进行按位异或操作。
# 5 ^ 3 输出 6 。
# -----------------------------------------------------
# ~ （ 按位取反）
# x 的按位取反结果为 -(x+1 )。
# ~5 输出 - 6
# -----------------------------------------------------
# not （ 布尔 “非”）
# 如果 x 是 Ture ， 则 返回 False 。 如果 x 是 False ， 则 返回 True 。x = Ture; not x 返回 False 。
# -----------------------------------------------------
# and （ 布尔 “与”）
# 如果 x 是 False ， 则 x and y 返回 False ， 否则 返回 y 的计算值。
# 当 x 是 False 时， x = False; y = True; x and y 将返回 False 。 在这一情境中 ，Python 将不会计算 y， 因 为 它已经了 解 and 表达式的左侧是 False ， 这意味着 整个表达式都将是 False 而不会是别 的值。 这种情况被称作短路计算（ Short-circuitEvaluation）
# -----------------------------------------------------
# or （ 布尔 “或”）
# 如果 x 是 True ， 则 返回 True ， 否则 它将返回 y 的计算值。
# x = Ture; y = False; x or y 将返回 Ture 。 在这里短路计算同 样适用 。
# -----------------------------------------------------
# -----------------------------------------------------
